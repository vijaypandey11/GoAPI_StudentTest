/*
 * Student Swagger
 *
 * Student Test Rest API using Swagger
 *
 * API version: 1.0.0
 * Contact: vijay.pandey1@globallogic.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
)

type Class struct {
	StudentCount int64 `json:"studentCount,omitempty"`

	AvgMarks int32 `json:"avgMarks,omitempty"`

	MinMarks int64 `json:"minMarks,omitempty"`

	MaxMarks int64 `json:"maxMarks,omitempty"`
}

func GetAverageMarks(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	condb, errdb := sql.Open("mssql", "server=localhost;database=VijayDB;")
	if errdb != nil {
		fmt.Println(" Error open db:", errdb.Error())
	}
	var avgMarks int
	rows, err := condb.Query("EXEC GetAvgMarks")
	if err != nil {
		log.Fatal(err)
	}
	for rows.Next() {
		err := rows.Scan(&avgMarks)
		if err != nil {
			log.Fatal(err)
		}
		log.Println(avgMarks)
		json.NewEncoder(w).Encode(avgMarks)
	}
	defer condb.Close()
	w.WriteHeader(http.StatusOK)
}

func GetMaximumMarks(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	condb, errdb := sql.Open("mssql", "server=localhost;database=VijayDB;")
	if errdb != nil {
		fmt.Println(" Error open db:", errdb.Error())
	}
	var maxMarks int
	rows, err := condb.Query("EXEC GetMaxMarks")
	if err != nil {
		log.Fatal(err)
	}
	for rows.Next() {
		err := rows.Scan(&maxMarks)
		if err != nil {
			log.Fatal(err)
		}
		log.Println(maxMarks)
		json.NewEncoder(w).Encode(maxMarks)
	}
	defer condb.Close()

	w.WriteHeader(http.StatusOK)
}

func GetMinimumMarks(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	condb, errdb := sql.Open("mssql", "server=localhost;database=VijayDB;")
	if errdb != nil {
		fmt.Println(" Error open db:", errdb.Error())
	}
	var minMarks int
	rows, err := condb.Query("EXEC GetMinMarks")
	if err != nil {
		log.Fatal(err)
	}
	for rows.Next() {
		err := rows.Scan(&minMarks)
		if err != nil {
			log.Fatal(err)
		}
		log.Println(minMarks)
		json.NewEncoder(w).Encode(minMarks)
	}
	defer condb.Close()
	w.WriteHeader(http.StatusOK)
}

func GetStudentsCount(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	condb, errdb := sql.Open("mssql", "server=localhost;database=VijayDB;")
	if errdb != nil {
		fmt.Println(" Error open db:", errdb.Error())
	}
	var studentCount int
	rows, err := condb.Query("EXEC GetStudentCount")
	if err != nil {
		log.Fatal(err)
	}
	for rows.Next() {
		err := rows.Scan(&studentCount)
		if err != nil {
			log.Fatal(err)
		}
		log.Println(studentCount)
		json.NewEncoder(w).Encode(studentCount)
	}
	defer condb.Close()

	w.WriteHeader(http.StatusOK)
}
