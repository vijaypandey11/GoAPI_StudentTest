/*
 * Student Swagger
 *
 * Student Test Rest API using Swagger
 *
 * API version: 1.0.0
 * Contact: vijay.pandey1@globallogic.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/gorilla/mux"
)

type Student struct {
	Id int32 `json:"id,omitempty"`

	// Allows underscore and dash in name
	Name string `json:"name"`

	Age int32 `json:"age,omitempty"`

	Marks int32 `json:"marks,omitempty"`

	// student status in the class
	Status string `json:"status,omitempty"`
}

var stu []Student

func AddStudent(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("content-type", "application/json")
	var stud Student
	_ = json.NewDecoder(r.Body).Decode(&stud)
	params := mux.Vars(r)
	var idStud, _ = strconv.Atoi(params["id"])
	var ageStud, _ = strconv.Atoi(params["age"])
	var marksStud, _ = strconv.Atoi(params["marks"])
	stud.Id = int32(idStud)
	stud.Name = params["name"]
	stud.Age = int32(ageStud)
	stud.Marks = int32(marksStud)
	if int32(marksStud) < 65 {
		stud.Status = "fail"
	} else {
		stud.Status = "pass"
	}
	stu = append(stu, stud)
	json.NewEncoder(w).Encode(stud)
}

func UpdateStudent(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("content-type", "application/json")
	// parameter for which student needs to be updated
	params := mux.Vars(r)
	// Iterate through students and update (Delete + Create)
	for index, item := range stu {
		if strconv.Itoa(int(item.Id)) == params["id"] {
			stu = append(stu[:index], stu[index+1:]...) // For removing old one
			// Add student after removing
			var stud Student
			_ = json.NewDecoder(r.Body).Decode(&stud)
			var idStud, _ = strconv.Atoi(params["id"])
			var ageStud, _ = strconv.Atoi(params["age"])
			var marksStud, _ = strconv.Atoi(params["marks"])
			stud.Id = int32(idStud)
			stud.Name = params["name"]
			stud.Age = int32(ageStud)
			stud.Marks = int32(marksStud)
			if int32(marksStud) < 65 {
				stud.Status = "fail"
			} else {
				stud.Status = "pass"
			}
			stu = append(stu, stud)
			json.NewEncoder(w).Encode(stu)
			return
		}
	}
	w.WriteHeader(http.StatusOK)
}

func UpdateStudentById(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("content-type", "application/json")
	// parameter for which student needs to be updated
	params := mux.Vars(r)
	// Iterate through students and update (Delete + Create)
	for index, item := range stu {
		if strconv.Itoa(int(item.Id)) == params["id"] {
			stu = append(stu[:index], stu[index+1:]...) // For removing old one
			// Add student after removing
			var stud Student
			_ = json.NewDecoder(r.Body).Decode(&stud)
			var idStud, _ = strconv.Atoi(params["id"])
			var ageStud, _ = strconv.Atoi(params["age"])
			var marksStud, _ = strconv.Atoi(params["marks"])
			stud.Id = int32(idStud)
			stud.Name = params["name"]
			stud.Age = int32(ageStud)
			stud.Marks = int32(marksStud)
			if int32(marksStud) < 65 {
				stud.Status = "fail"
			} else {
				stud.Status = "pass"
			}
			stu = append(stu, stud)
			json.NewEncoder(w).Encode(stu)
			return
		}
	}
	w.WriteHeader(http.StatusOK)
}

func DeleteStudent(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("content-type", "application/json")
	// Pass parameters
	params := mux.Vars(r)
	// Iterate through Student collection to get student for supplied id
	for _, item := range stu {
		if strconv.Itoa(int(item.Id)) == params["id"] {
			json.NewEncoder(w).Encode(item)
			return
		}
	}
	json.NewEncoder(w).Encode(stu)
	w.WriteHeader(http.StatusOK)
}

func GetStudentById(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	// pass parameters
	params := mux.Vars(r)
	// Iterate through Student collection to get student for supplied id
	for _, item := range stu {
		if strconv.Itoa(int(item.Id)) == params["id"] {
			json.NewEncoder(w).Encode(item)
			return
		}
	}
	w.WriteHeader(http.StatusOK)
}

func FindStudentsByAge(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	// pass parameters
	params := mux.Vars(r)
	// Iterate through Student collection to get student for supplied age
	for _, item := range stu {
		if strconv.Itoa(int(item.Age)) == params["age"] {
			json.NewEncoder(w).Encode(item)
			return
		}
	}
	w.WriteHeader(http.StatusOK)
}

func FindStudentsByName(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	// pass parameters
	params := mux.Vars(r)
	// Iterate through Student collection to get student for supplied name
	for _, item := range stu {
		if item.Name == params["name"] {
			json.NewEncoder(w).Encode(item)
			return
		}
	}
	w.WriteHeader(http.StatusOK)
}

func FindStudentsByStatus(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	// pass parameters
	params := mux.Vars(r)
	// Iterate through Student collection to get student for supplied id
	for _, item := range stu {
		if (item.Status) == params["status"] {
			json.NewEncoder(w).Encode(item)
			return
		}
	}
	w.WriteHeader(http.StatusOK)
}
